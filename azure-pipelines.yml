name: $(Build.BuildID)
resources:
- repo: self

phases:
- phase: Linux_Phase
  displayName: Linux
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604

  steps:
  - powershell: |
       # Build the module and help
       .\Build-Module.ps1

    displayName: 'Build Module'

  - powershell: |
       # Load the psd1 file so you can read the required modules and install them
       $manifest = Import-PowerShellDataFile .\dist\*.psd1

       # Install each module
       $manifest.RequiredModules | ForEach-Object { Install-Module -Name $_ -Repository PSGallery -F -Scope CurrentUser }

    displayName: 'Install Dependencies'

  - powershell: |
        Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser -AllowClobber -SkipPublisherCheck

    displayName: 'Install Pester'

  - powershell: |
       Import-Module .\dist\*.psd1
       Invoke-Pester -Script .\unit -EnableExit -Strict -OutputFile test-results.xml -OutputFormat NUnitXml -passthru

    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Run Unit Tests'

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testRunner: NUnit
      testResultsFiles: '**\test-results.xml'
      testRunTitle: 'Linux Unit Tests'
    condition: succeededOrFailed()

- phase: MacOS_Phase
  displayName: MacOS
  condition: succeeded()
  queue:
    name: Hosted macOS High Sierra

  steps:
  - powershell: |
       # Build the module and help
       .\Build-Module.ps1

    displayName: 'Build Module'

  - powershell: |
       # Load the psd1 file so you can read the required modules and install them
       $manifest = Import-PowerShellDataFile .\dist\*.psd1

       # Install each module
       $manifest.RequiredModules | ForEach-Object { Install-Module -Name $_ -Repository PSGallery -F -Scope CurrentUser }

    displayName: 'Install Dependencies'

  - powershell: |
        Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser -AllowClobber -SkipPublisherCheck

    displayName: 'Install Pester'

  - powershell: |
       Import-Module .\dist\*.psd1
       Invoke-Pester -Script .\unit -EnableExit -Strict -OutputFile test-results.xml -OutputFormat NUnitXml -passthru

    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Run Unit Tests'

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testRunner: NUnit
      testResultsFiles: '**\test-results.xml'
      testRunTitle: 'Mac Unit Tests'
    condition: succeededOrFailed()

- phase: Windows_Phase
  displayName: Windows
  condition: succeeded()
  queue:
    name: Hosted Windows 2019 with VS2019

  steps:
  - powershell: |
       # Build the module and help
       .\Build-Module.ps1 -buildHelp

    displayName: 'Build Module'

  - powershell: |
       # Load the psd1 file so you can read the required modules and install them
       $manifest = Import-PowerShellDataFile .\dist\*.psd1

       # Install each module
       $manifest.RequiredModules | ForEach-Object { Install-Module -Name $_ -Repository PSGallery -F -Scope CurrentUser }

    displayName: 'Install Dependencies'

  - powershell: |
        Install-Module -Name PSScriptAnalyzer -Repository PSGallery -Force -Scope CurrentUser -Verbose

    displayName: 'Install PSScriptAnalyzer'

  - powershell: |
       # Has to happen in this task for it to take effect
       # Load the psd1 file so you can read the required modules and import them
       $manifest = Import-PowerShellDataFile .\dist\*.psd1

       # Import each module
       $manifest.RequiredModules | ForEach-Object { Import-Module -Name $_ }

       $r = Invoke-ScriptAnalyzer –Path ./dist –Recurse | Where-Object severity -ne "Information"
       $r | ForEach-Object {Write-Host "##vso[task.logissue type=$($_.Severity);sourcepath=$($_.ScriptPath);linenumber=$($_.Line);columnnumber=$($_.Column);]$($_.Message)"}

    displayName: 'Run Static Code Analysis'

  - powershell: |
        Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser -AllowClobber -SkipPublisherCheck -Verbose

    displayName: 'Install Pester'

  - powershell: |
       Import-Module .\dist\*.psd1
       Invoke-Pester -Script .\unit -CodeCoverage .\dist\*.ps*1 -CodeCoverageOutputFile coverage.xml -CodeCoverageOutputFileFormat JaCoCo -EnableExit -Strict -OutputFile test-results.xml -OutputFormat NUnitXml

    workingDirectory: '$(System.DefaultWorkingDirectory)'
    condition: and(succeededOrFailed(), eq(variables['System.PullRequest.IsFork'], false))
    displayName: 'Run Unit Tests with Code Coverage'

  - powershell: |
       Import-Module .\dist\*.psd1
       Invoke-Pester -Script .\unit -EnableExit -Strict -OutputFile test-results.xml -OutputFormat NUnitXml -passthru

    workingDirectory: '$(System.DefaultWorkingDirectory)'
    condition: and(succeededOrFailed(), eq(variables['System.PullRequest.IsFork'], true))
    displayName: 'Run Unit Tests'

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testRunner: NUnit
      testResultsFiles: '**\TEST-*.xml'
      testRunTitle: 'Windows Unit Tests'
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      summaryFileLocation: '**\coverage.xml'
      failIfCoverageEmpty: true
    condition: and(succeededOrFailed(), eq(variables['System.PullRequest.IsFork'], false))

  - task: CredScan@2
    displayName: 'Run CredScan'
    inputs:
      suppressionsFile: '$(Build.SourcesDirectory)/build/credscan-supression.json'

  - task: SdtReport@1
    displayName: 'Create Security Analysis Report'
    inputs:
      AllTools: true

  - task: PublishSecurityAnalysisLogs@2
    displayName: 'Publish Security Analysis Logs'

  - task: PostAnalysis@1
    displayName: 'Post Analysis'
    inputs:
      AllTools: true

  - task: CopyFiles@2
    displayName: 'Copy Module to Artifacts Folder'
    inputs:
      Contents: |
       README.md
       .gitignore
       dist\**
      TargetFolder: '$(build.artifactstagingdirectory)/VSTeam'
      flattenFolders: false
    condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], false))

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Module'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/VSTeam'
      ArtifactName: 'Module'
      publishLocation: 'Container'
    condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], false))

  - task: CopyFiles@2
    displayName: 'Copy Integration Tests Artifacts Folder'
    inputs:
      Contents: |
       dist\*.psd1
       integration\**

      TargetFolder: '$(build.artifactstagingdirectory)/Tests'
    condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], false))

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Tests'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)/Tests'
      ArtifactName: Test
      publishLocation: 'Container'
    condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], false))
